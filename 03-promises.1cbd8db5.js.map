{"mappings":"gfAAA,IAEIA,EAFJC,EAAAC,EAAA,SAGIC,EAAY,EACHC,SAASC,cAAc,SAI/BC,iBAAiB,UAI4G,SAA5GC,GACpBA,EAAEC,iBAEF,IAA8BC,EAAAF,EAAEG,cAA1BC,EAAwBF,EAAxBE,MAAOC,EAAiBH,EAAjBG,KAAMC,EAAWJ,EAAXI,OACnBC,YAAcD,EAAOE,MACrBf,EAAagB,OAAOL,EAAMI,OAMuE,SAApFH,EAAMC,GACnBI,MAAQ,EAMR,IAAIC,EAAUlB,EACVmB,EAAShB,EACbiB,WAAaC,aAAY,WACvBJ,OAAS,EACTC,GAAWC,EAEPF,OAASJ,GACXS,cAAcF,YAuBc,SAAVG,EAAUL,IAhBH,SAARK,EAAUZ,GAC/B,IAAMa,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EAEFI,EAAQ,CAAEL,WAAUZ,UAGpBkB,EAAO,CAAEN,WAAUZ,YAEpBX,OAML+B,CAAcR,EAAUL,GACqDc,MAArE,SAAAC,G,IAAGC,EAAQD,EAARV,SAAUZ,EAAKsB,EAALtB,MACjBV,EAAAkC,OAAOC,QAAQ,uBAAwCC,OAAfH,EAAS,QAAYG,OAAN1B,EAAM,OAC3D2B,QAAMC,IAAI,uBAAwCF,OAAfH,EAAS,QAAYG,OAAN1B,EAAM,UAE3D6B,OAAM,SAAAP,G,IAAGC,EAAQD,EAARV,SAAUZ,EAAKsB,EAALtB,MAClBV,EAAAkC,OAAOM,QAAQ,sBAAuCJ,OAAfH,EAAS,QAAYG,OAAN1B,EAAM,OAC1D2B,QAAMC,IAAI,sBAAuCF,OAAfH,EAAS,QAAYG,OAAN1B,EAAM,UA7B3D+B,CAAezB,MAAOC,KACrBN,GArBH+B,CADAxC,EAAYa,OAAOJ,EAAKG,OACPD,gB","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nlet firstDelay;\nlet delayStep = 0;\nconst form = document.querySelector('.form');\n\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\nform.addEventListener('submit', onSobmitForm);\n// refs.btn.addEventListener('click', onBtn);\n//////////////////////////////////////////////////\n//форма сабмита /убрана дефолтная перезагрузка формы / диструкторизация полей ввода / onBtn - принимает выводимый в форму интервал и значение количеств повторений\nfunction onSobmitForm(e) {\n  e.preventDefault();\n\n  let { delay, step, amount } = e.currentTarget;\n  amountValue = amount.value;\n  firstDelay = Number(delay.value);\n  delayStep = Number(step.value);\n  onBtn(delayStep, amountValue);\n}\n\n// функция при нажатии по кнопке према ввода в сабмите и срабатывания формы / принимает интервал и количество повторений\nfunction onBtn(step, amount) {\n  count = 0; // начальное значение повтореений\n  //  for (let i = 0; i < amountValue; i++) {\n  //       if (i > 0) {\n  //         firstDelayInputValue += delayStep;\n  //       }\n\n  let goDelay = firstDelay;\n  let goStep = delayStep;\n  intervalId = setInterval(function () {\n    count += 1;\n    goDelay += goStep;\n    // console.log((firstDelay = firstDelay + step));\n    if (count == amount) {\n      clearInterval(intervalId);\n    }\n    onLaunchPromis(count, goDelay); /// вызывает функцию  в которой воводит работу промиса\n  }, step);\n}\n\n/// createPromise - функия работы промиса обрабатывает\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, firstDelay);\n  });\n}\n\n// onLaunchPromis - функчия обрабатывания вывода промисов\nfunction onLaunchPromis(position, goDelay) {\n  createPromise(position, goDelay) // функция создания промиса принимает positionNum - нумерация промиса / firstDelay - задержка срабатывания промиса\n    .then(({ position, delay }) => {\n      Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n}\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/* import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', definePromise);\n\nlet amountValue = null;\nlet delayTime = null;\nlet firstDelayInputValue = null;\n\nfunction definePromise(event) {\n  event.preventDefault();\n\n  const { elements } = event.currentTarget;\n\n  const { delay, step, amount } = elements;\n  amountValue = Number(amount.value);\n  delayTime = Number(step.value);\n  firstDelayInputValue = Number(delay.value);\n\n  generatePromises(amountValue, firstDelayInputValue);\n\n  function generatePromises(amountValue, firstDelayInputValue) {\n    let position = null;\n\n    for (let i = 0; i < amountValue; i++) {\n      if (i > 0) {\n        firstDelayInputValue += delayTime;\n      }\n      position += 1;\n\n      function createPromise(position, delayTime) {\n        const shouldResolve = Math.random() > 0.3;\n        return new Promise((resolve, reject) => {\n          setTimeout(() => {\n            if (shouldResolve) {\n              resolve({ position, delayTime });\n            } else {\n              reject({ position, delayTime });\n            }\n          }, firstDelayInputValue);\n        });\n      }\n\n      createPromise(position, firstDelayInputValue)\n        .then(({ position, delayTime }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delayTime}ms`\n          );\n        })\n        .catch(({ position, delayTime }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delayTime}ms`\n          );\n        });\n    }\n  }\n}\n */\n"],"names":["$ce04d3a99e08e73b$var$firstDelay","$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$delayStep","document","querySelector","addEventListener","e","preventDefault","_currentTarget","currentTarget","delay","step","amount","amountValue","value","Number","count","goDelay","goStep","intervalId","setInterval","clearInterval","position","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","$ce04d3a99e08e73b$var$createPromise","then","param","_$position","Notify","success","concat","console","log","catch","failure","$ce04d3a99e08e73b$var$onLaunchPromis","$ce04d3a99e08e73b$var$onBtn"],"version":3,"file":"03-promises.1cbd8db5.js.map"}