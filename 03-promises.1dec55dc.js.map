{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,IAAIC,EACAC,EAAY,EACHC,SAASC,cAAc,SAI/BC,iBAAiB,UAI4G,SAA5GC,GACpBA,EAAEC,iBAEF,IAAIC,MAAEA,EAAKC,KAAEA,EAAIC,OAAEA,GAAWJ,EAAEK,cAChCC,YAAcF,EAAOG,MACrBZ,EAAaa,OAAON,EAAMK,OAC1BX,EAAYY,OAAOL,EAAKI,OAKyE,SAApFJ,EAAMC,GACnBK,MAAQ,EAMR,IAAIC,EAAUf,EACVgB,EAASf,EACbgB,WAAaC,aAAY,WACvBJ,OAAS,EACTC,GAAWC,EAEPF,OAASL,GACXU,cAAcF,YAuBc,SAAVG,EAAUL,IAhBH,SAARM,EAAUd,GAC/B,MAAMe,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EAEFI,EAAQ,C,SAAEL,E,MAAUd,IAGpBoB,EAAO,C,SAAEN,E,MAAUd,MAEpBP,OAML6B,CAAcT,EAAUL,GACqDe,MAArE,EAACT,SAAEA,EAAQd,MAAEA,MACjBT,EAAAiC,OAAOC,QAAQ,uBAAqBX,QAAiBd,OACnD0B,QAAMC,IAAI,uBAAqBb,QAAiBd,UAEnD4B,OAAM,EAACd,SAAEA,EAAQd,MAAEA,MAClBT,EAAAiC,OAAOK,QAAQ,sBAAoBf,QAAiBd,OAClD0B,QAAMC,IAAI,sBAAoBb,QAAiBd,UA7BnD8B,CAAevB,MAAOC,KACrBP,GArBH8B,CAAMrC,EAAWU","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nlet firstDelay;\nlet delayStep = 0;\nconst form = document.querySelector('.form');\n\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\nform.addEventListener('submit', onSobmitForm);\n// refs.btn.addEventListener('click', onBtn);\n//////////////////////////////////////////////////\n//форма сабмита /убрана дефолтная перезагрузка формы / диструкторизация полей ввода / onBtn - принимает выводимый в форму интервал и значение количеств повторений\nfunction onSobmitForm(e) {\n  e.preventDefault();\n\n  let { delay, step, amount } = e.currentTarget;\n  amountValue = amount.value;\n  firstDelay = Number(delay.value);\n  delayStep = Number(step.value);\n  onBtn(delayStep, amountValue);\n}\n\n// функция при нажатии по кнопке према ввода в сабмите и срабатывания формы / принимает интервал и количество повторений\nfunction onBtn(step, amount) {\n  count = 0; // начальное значение повтореений\n  //  for (let i = 0; i < amountValue; i++) {\n  //       if (i > 0) {\n  //         firstDelayInputValue += delayStep;\n  //       }\n\n  let goDelay = firstDelay;\n  let goStep = delayStep;\n  intervalId = setInterval(function () {\n    count += 1;\n    goDelay += goStep;\n    // console.log((firstDelay = firstDelay + step));\n    if (count == amount) {\n      clearInterval(intervalId);\n    }\n    onLaunchPromis(count, goDelay); /// вызывает функцию  в которой воводит работу промиса\n  }, step);\n}\n\n/// createPromise - функия работы промиса обрабатывает\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, firstDelay);\n  });\n}\n\n// onLaunchPromis - функчия обрабатывания вывода промисов\nfunction onLaunchPromis(position, goDelay) {\n  createPromise(position, goDelay) // функция создания промиса принимает positionNum - нумерация промиса / firstDelay - задержка срабатывания промиса\n    .then(({ position, delay }) => {\n      Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n}\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/* import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', definePromise);\n\nlet amountValue = null;\nlet delayTime = null;\nlet firstDelayInputValue = null;\n\nfunction definePromise(event) {\n  event.preventDefault();\n\n  const { elements } = event.currentTarget;\n\n  const { delay, step, amount } = elements;\n  amountValue = Number(amount.value);\n  delayTime = Number(step.value);\n  firstDelayInputValue = Number(delay.value);\n\n  generatePromises(amountValue, firstDelayInputValue);\n\n  function generatePromises(amountValue, firstDelayInputValue) {\n    let position = null;\n\n    for (let i = 0; i < amountValue; i++) {\n      if (i > 0) {\n        firstDelayInputValue += delayTime;\n      }\n      position += 1;\n\n      function createPromise(position, delayTime) {\n        const shouldResolve = Math.random() > 0.3;\n        return new Promise((resolve, reject) => {\n          setTimeout(() => {\n            if (shouldResolve) {\n              resolve({ position, delayTime });\n            } else {\n              reject({ position, delayTime });\n            }\n          }, firstDelayInputValue);\n        });\n      }\n\n      createPromise(position, firstDelayInputValue)\n        .then(({ position, delayTime }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delayTime}ms`\n          );\n        })\n        .catch(({ position, delayTime }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delayTime}ms`\n          );\n        });\n    }\n  }\n}\n */\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$firstDelay","$47d4ff9957288465$var$delayStep","document","querySelector","addEventListener","e","preventDefault","delay","step","amount","currentTarget","amountValue","value","Number","count","goDelay","goStep","intervalId","setInterval","clearInterval","position1","position","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","$47d4ff9957288465$var$createPromise","then","Notify","success","console","log","catch","failure","$47d4ff9957288465$var$onLaunchPromis","$47d4ff9957288465$var$onBtn"],"version":3,"file":"03-promises.1dec55dc.js.map"}